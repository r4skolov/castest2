{"version":3,"file":"app.min.js","mappings":"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","sources":["webpack:///./source/js/components/Accordion.js","webpack:///./source/js/components/MicroModal.js","webpack:///./source/js/index.js"],"sourcesContent":["const accordion = () => {\n\tconst accordions    = document.querySelectorAll('.accordion');\n\tlet activeAccordion = null;\n\n\taccordions.forEach((el) => {\n\t\tel.addEventListener('click', (e) => {\n\t\t\tconst self    = e.currentTarget;\n\t\t\tconst control = self.querySelector('.accordion__control');\n\t\t\tconst content = self.querySelector('.accordion__content');\n\n\t\t\tif (e.target.closest('.accordion__content')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (self === activeAccordion) {\n\t\t\t\tself.classList.remove('open');\n\t\t\t\tcontrol.setAttribute('aria-expanded', false);\n\t\t\t\tcontent.setAttribute('aria-hidden', true);\n\t\t\t\tactiveAccordion = null;\n\t\t\t} else {\n\t\t\t\tif (activeAccordion) {\n\t\t\t\t\tconst activeControl = activeAccordion.querySelector('.accordion__control');\n\t\t\t\t\tconst activeContent = activeAccordion.querySelector('.accordion__content');\n\t\t\t\t\tactiveAccordion.classList.remove('open');\n\t\t\t\t\tactiveControl.setAttribute('aria-expanded', false);\n\t\t\t\t\tactiveContent.setAttribute('aria-hidden', true);\n\t\t\t\t}\n\n\t\t\t\tself.classList.add('open');\n\t\t\t\tcontrol.setAttribute('aria-expanded', true);\n\t\t\t\tcontent.setAttribute('aria-hidden', false);\n\n\t\t\t\tactiveAccordion = self;\n\t\t\t}\n\t\t});\n\t});\n};\n\nexport default accordion;\n","const MicroModal = (() => {\n\tconst FOCUSABLE_ELEMENTS = [\n\t\t'a[href]',\n\t\t'area[href]',\n\t\t'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n\t\t'select:not([disabled]):not([aria-hidden])',\n\t\t'textarea:not([disabled]):not([aria-hidden])',\n\t\t'button:not([disabled]):not([aria-hidden])',\n\t\t'iframe',\n\t\t'object',\n\t\t'embed',\n\t\t'[contenteditable]',\n\t\t'[tabindex]:not([tabindex^=\"-\"])',\n\t];\n\n\tclass Modal {\n\t\tconstructor({\n\t\t\ttargetModal,\n\t\t\ttriggers = [],\n\t\t\tonShow = () => {\n\t\t\t},\n\t\t\tonClose = () => {\n\t\t\t},\n\t\t\topenTrigger = 'data-micromodal-trigger',\n\t\t\tcloseTrigger = 'data-micromodal-close',\n\t\t\topenClass = 'is-open',\n\t\t\tdisableScroll = true,\n\t\t\tdisableScrollElement = [],\n\t\t\tdisableFocus = false,\n\t\t\tbackFocus = true,\n\t\t\tawaitCloseAnimation = false,\n\t\t\tawaitOpenAnimation = false,\n\t\t\tdisableEsc = false,\n\t\t\tdebugMode = false,\n\t\t}) {\n\t\t\t// Save a reference of the modal\n\t\t\tthis.modal = document.getElementById(targetModal);\n\n\t\t\t// Save a reference to the passed config\n\t\t\tthis.config = {\n\t\t\t\tdebugMode,\n\t\t\t\tdisableScroll,\n\t\t\t\tdisableScrollElement,\n\t\t\t\topenTrigger,\n\t\t\t\tcloseTrigger,\n\t\t\t\topenClass,\n\t\t\t\tonShow,\n\t\t\t\tonClose,\n\t\t\t\tawaitCloseAnimation,\n\t\t\t\tawaitOpenAnimation,\n\t\t\t\tdisableFocus,\n\t\t\t\tbackFocus,\n\t\t\t\tdisableEsc,\n\t\t\t};\n\n\t\t\t// Register click events only if pre binding eventListeners\n\t\t\tif (triggers.length > 0) this.registerTriggers(...triggers);\n\n\t\t\t// pre bind functions for event listeners\n\t\t\tthis.onClick   = this.onClick.bind(this);\n\t\t\tthis.onKeydown = this.onKeydown.bind(this);\n\t\t}\n\n\t\t/**\n\t\t * Loops through all openTriggers and binds click event\n\t\t * @param  {array} triggers [Array of node elements]\n\t\t * @return {void}\n\t\t */\n\t\tregisterTriggers(...triggers) {\n\t\t\ttriggers.filter(Boolean).forEach((trigger) => {\n\t\t\t\ttrigger.addEventListener('click', (event) => this.showModal(event));\n\t\t\t});\n\t\t}\n\n\t\tshowModal(event = null) {\n\t\t\tthis.activeElement = document.activeElement;\n\t\t\tthis.modal.setAttribute('aria-hidden', 'false');\n\n\t\t\tdocument.querySelectorAll('.modal.is-open').forEach((modal) => {\n\t\t\t\tmodal.classList.remove('is-open');\n\t\t\t});\n\n\t\t\tthis.modal.classList.add('is-open');\n\t\t\tthis.scrollBehaviour('disable');\n\t\t\tthis.addEventListeners();\n\n\t\t\tif (this.config.awaitOpenAnimation) {\n\t\t\t\tconst handler = () => {\n\t\t\t\t\tthis.modal.removeEventListener('animationend', handler, false);\n\t\t\t\t\tthis.setFocusToFirstNode();\n\t\t\t\t};\n\t\t\t\tthis.modal.addEventListener('animationend', handler, false);\n\t\t\t} else {\n\t\t\t\tthis.setFocusToFirstNode();\n\t\t\t}\n\n\t\t\tthis.config.onShow(this.modal, this.activeElement, event);\n\t\t}\n\n\t\tcloseModal(event = null) {\n\t\t\tconst _this   = this;\n\t\t\tconst { modal } = _this;\n\t\t\t_this.modal.setAttribute('aria-hidden', 'true');\n\t\t\t_this.removeEventListeners();\n\n\t\t\tif (_this.activeElement && _this.activeElement.focus) {\n\t\t\t\tif (_this.config.backFocus) {\n\t\t\t\t\t_this.activeElement.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t\t_this.config.onClose(_this.modal, _this.activeElement, event);\n\n\t\t\tif (this.config.awaitCloseAnimation) {\n\t\t\t\tconst { openClass } = _this.config;\n\t\t\t\tthis.modal.addEventListener('animationend', function handler() {\n\t\t\t\t\tmodal.classList.remove(openClass);\n\t\t\t\t\t_this.scrollBehaviour('enable');\n\t\t\t\t\tmodal.removeEventListener('animationend', handler, false);\n\t\t\t\t}, false);\n\t\t\t} else {\n\t\t\t\tmodal.classList.remove(this.config.openClass);\n\t\t\t\t_this.scrollBehaviour('enable');\n\t\t\t}\n\t\t}\n\n\t\tcloseModalById(targetModal) {\n\t\t\tthis.modal = document.getElementById(targetModal);\n\t\t\tif (this.modal) this.closeModal();\n\t\t}\n\n\t\t// eslint-disable-next-line class-methods-use-this\n\t\tgetSizeScrollbar() {\n\t\t\treturn window.innerWidth - document.documentElement.clientWidth;\n\t\t}\n\n\t\tgetScrollShiftNodes() {\n\t\t\tif (!this.config.disableScrollElement.length) return false;\n\t\t\tconst nodes = document.querySelectorAll(this.config.disableScrollElement);\n\t\t\treturn Array(...nodes);\n\t\t}\n\n\t\tscrollBehaviour(toggle) {\n\t\t\tif (!this.config.disableScroll) return;\n\t\t\tconst body               = document.querySelector('body');\n\t\t\tconst scrollShiftElement = this.getScrollShiftNodes();\n\t\t\tconst scrollSize         = this.getSizeScrollbar();\n\t\t\tswitch (toggle) {\n\t\t\tcase 'enable':\n\t\t\t\tObject.assign(document.documentElement.style, {\n\t\t\t\t\tmarginRight : '',\n\t\t\t\t\toverflow    : '',\n\t\t\t\t});\n\t\t\t\tObject.assign(body.style, {\n\t\t\t\t\toverflow : '',\n\t\t\t\t});\n\t\t\t\tif (scrollShiftElement) {\n\t\t\t\t\tscrollShiftElement.forEach((item) => {\n\t\t\t\t\t\tObject.assign(item.style, {\n\t\t\t\t\t\t\tmarginRight : '',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'disable':\n\t\t\t\tObject.assign(document.documentElement.style, {\n\t\t\t\t\tmarginRight : `${scrollSize}px`,\n\t\t\t\t\toverflow    : 'hidden',\n\t\t\t\t});\n\t\t\t\tObject.assign(body.style, {\n\t\t\t\t\toverflow : 'hidden',\n\t\t\t\t});\n\t\t\t\tif (scrollShiftElement) {\n\t\t\t\t\tscrollShiftElement.forEach((item) => {\n\t\t\t\t\t\tObject.assign(item.style, {\n\t\t\t\t\t\t\tmarginRight : `${scrollSize}px`,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t}\n\t\t}\n\n\t\taddEventListeners() {\n\t\t\tthis.modal.addEventListener('touchstart', this.onClick);\n\t\t\tthis.modal.addEventListener('click', this.onClick);\n\t\t\tdocument.addEventListener('keydown', this.onKeydown);\n\t\t}\n\n\t\tremoveEventListeners() {\n\t\t\tthis.modal.removeEventListener('touchstart', this.onClick);\n\t\t\tthis.modal.removeEventListener('click', this.onClick);\n\t\t\tdocument.removeEventListener('keydown', this.onKeydown);\n\t\t}\n\n\t\t/**\n\t\t * Handles all click events from the modal.\n\t\t * Closes modal if a target matches the closeTrigger attribute.\n\t\t * @param {*} event Click Event\n\t\t */\n\t\tonClick(event) {\n\t\t\tif (\n\t\t\t\tevent.target.hasAttribute(this.config.closeTrigger)\n\t\t\t\t|| event.target.parentNode.hasAttribute(this.config.closeTrigger)\n\t\t\t) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tthis.closeModal(event);\n\t\t\t}\n\t\t}\n\n\t\tonKeydown(event) {\n\t\t\tif (!this.config.disableEsc) {\n\t\t\t\tif (event.keyCode === 27) this.closeModal(event);\n\t\t\t} // esc\n\t\t\tif (event.keyCode === 9) this.retainFocus(event); // tab\n\t\t}\n\n\t\tgetFocusableNodes() {\n\t\t\tconst nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n\t\t\treturn Array(...nodes);\n\t\t}\n\n\t\t/**\n\t\t * Tries to set focus on a node which is not a close trigger\n\t\t * if no other nodes exist then focuses on first close trigger\n\t\t */\n\t\tsetFocusToFirstNode() {\n\t\t\tif (this.config.disableFocus) return;\n\n\t\t\tconst focusableNodes = this.getFocusableNodes();\n\n\t\t\t// no focusable nodes\n\t\t\tif (focusableNodes.length === 0) return;\n\n\t\t\t// remove nodes on whose click, the modal closes\n\t\t\t// could not think of a better name :(\n\t\t\tconst nodesWhichAreNotCloseTargets = focusableNodes.filter((node) => !node.hasAttribute(this.config.closeTrigger));\n\n\t\t\tif (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n\t\t\tif (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n\t\t}\n\n\t\tretainFocus(event) {\n\t\t\tlet focusableNodes = this.getFocusableNodes();\n\n\t\t\t// no focusable nodes\n\t\t\tif (focusableNodes.length === 0) return;\n\n\t\t\t/**\n\t\t\t * Filters nodes which are hidden to prevent\n\t\t\t * focus leak outside modal\n\t\t\t */\n\t\t\tfocusableNodes = focusableNodes.filter((node) => (node.offsetParent !== null));\n\n\t\t\t// if disableFocus is true\n\t\t\tif (!this.modal.contains(document.activeElement)) {\n\t\t\t\tfocusableNodes[0].focus();\n\t\t\t} else {\n\t\t\t\tconst focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n\t\t\t\tif (event.shiftKey && focusedItemIndex === 0) {\n\t\t\t\t\tfocusableNodes[focusableNodes.length - 1].focus();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tif (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n\t\t\t\t\tfocusableNodes[0].focus();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Modal prototype ends.\n\t * Here on code is responsible for detecting and\n\t * auto binding event handlers on modal triggers\n\t */\n\n\t\t  // Keep a reference to the opened modal\n\tlet activeModal    = null;\n\tconst activeModals = {};\n\n\t/**\n\t * Generates an associative array of modals and it's\n\t * respective triggers\n\t * @param  {array} triggers     An array of all triggers\n\t * @param  {string} triggerAttr The data-attribute which triggers the module\n\t * @return {array}\n\t */\n\tconst generateTriggerMap = (triggers, triggerAttr) => {\n\t\tconst triggerMap = [];\n\n\t\ttriggers.forEach((trigger) => {\n\t\t\tconst targetModal = trigger.attributes[triggerAttr].value;\n\t\t\tif (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n\t\t\ttriggerMap[targetModal].push(trigger);\n\t\t});\n\n\t\treturn triggerMap;\n\t};\n\n\t/**\n\t * Validates whether a modal of the given id exists\n\t * in the DOM\n\t * @param  {number} id  The id of the modal\n\t * @return {boolean}\n\t */\n\tconst validateModalPresence = (id) => {\n\t\tif (!document.getElementById(id)) {\n\t\t\tconsole.warn(\n\t\t\t\t`MicroModal: \\u2757Seems like you have missed %c'${id}'`,\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'ID somewhere in your code. Refer example below to resolve it.',\n\t\t\t);\n\t\t\tconsole.warn(\n\t\t\t\t'%cExample:',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t`<div class=\"modal\" id=\"${id}\"></div>`,\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Validates if there are modal triggers present\n\t * in the DOM\n\t * @param  {array} triggers An array of data-triggers\n\t * @return {boolean}\n\t */\n\tconst validateTriggerPresence = (triggers) => {\n\t\tif (triggers.length <= 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'MicroModal: \\u2757Please specify at least one %c\\'micromodal-trigger\\'',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'data attribute.',\n\t\t\t);\n\t\t\tconsole.warn(\n\t\t\t\t'%cExample:',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Checks if triggers and their corresponding modals\n\t * are present in the DOM\n\t * @param  {array} triggers   Array of DOM nodes which have data-triggers\n\t * @param  {array} triggerMap Associative array of modals and their triggers\n\t * @return {boolean}\n\t */\n\tconst validateArgs = (triggers, triggerMap) => {\n\t\tvalidateTriggerPresence(triggers);\n\t\tif (!triggerMap) return true;\n\t\tfor (const id in triggerMap) validateModalPresence(id);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Binds click handlers to all modal triggers\n\t * @param  {object} config [description]\n\t * @return void\n\t */\n\tconst init = (config) => {\n\t\t// Create an config object with default openTrigger\n\t\tconst options = { openTrigger : 'data-micromodal-trigger', ...config };\n\n\t\t// Collects all the nodes with the trigger\n\t\tconst triggers = [...document.querySelectorAll(`[${options.openTrigger}]`)];\n\n\t\t// Makes a mappings of modals with their trigger nodes\n\t\tconst triggerMap = generateTriggerMap(triggers, options.openTrigger);\n\n\t\t// Checks if modals and triggers exist in dom\n\t\tif (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return;\n\n\t\t// For every target modal creates a new instance\n\t\tfor (const key in triggerMap) {\n\t\t\tconst value         = triggerMap[key];\n\t\t\toptions.targetModal = key;\n\t\t\toptions.triggers    = [...value];\n\t\t\tactiveModal         = new Modal(options); // eslint-disable-line no-new\n\t\t\tactiveModals[key]   = activeModal;\n\t\t}\n\t};\n\n\t/**\n\t * Shows a particular modal\n\t * @param  {string} targetModal [The id of the modal to display]\n\t * @param  {object} config [The configuration object to pass]\n\t * @return {void}\n\t */\n\tconst show = (targetModal, config) => {\n\t\tconst options       = config || {};\n\t\toptions.targetModal = targetModal;\n\n\t\t// Checks if modals and triggers exist in dom\n\t\tif (options.debugMode === true && validateModalPresence(targetModal) === false) return;\n\n\t\t// clear events in case previous modal wasn't closed\n\t\tif (activeModal) activeModal.removeEventListeners();\n\n\t\t// stores reference to active modal\n\t\tactiveModal = new Modal(options); // eslint-disable-line no-new\n\t\tactiveModal.showModal();\n\t};\n\n\t/**\n\t * Closes the active modal\n\t * @param  {string} targetModal [The id of the modal to close]\n\t * @return {void}\n\t */\n\tconst close = (targetModal) => {\n\t\ttargetModal ? activeModals[targetModal].closeModalById(targetModal) : activeModals[targetModal].closeModal();\n\t};\n\n\treturn {\n\t\tinit,\n\t\tshow,\n\t\tclose,\n\t};\n})();\n\nexport default MicroModal;\n\nif (typeof window !== 'undefined') {\n\twindow.MicroModal = MicroModal;\n}\n","import accordion  from './components/Accordion';\nimport MicroModal from './components/MicroModal';\n\nfunction modal() {\n\tconst settings       = {\n\t\topenTrigger         : 'data-modal-open',\n\t\tcloseTrigger        : 'data-modal-close',\n\t\topenClass           : 'is-open',\n\t\tawaitOpenAnimation  : true,\n\t\tawaitCloseAnimation : true,\n\t};\n\twindow.startModal    = function (id) {\n\t\tMicroModal.show(\n\t\t\tid,\n\t\t\tsettings,\n\t\t);\n\t};\n\tconst modalCloseLink = document.querySelector('.js-modal-close');\n\tif (modalCloseLink) {\n\t\tmodalCloseLink.addEventListener('click', (e) => {\n\t\t\te.preventDefault();\n\t\t\tconst { id } = e.target.dataset;\n\t\t\tif (id) {\n\t\t\t\tMicroModal.close(id, settings);\n\t\t\t}\n\t\t});\n\t}\n\n\tMicroModal.init(settings);\n}\n\n// Init\nfunction init() {\n\taccordion();\n\tmodal();\n}\n\n(function () {\n\tinit();\n}());\n"],"names":["accordion","accordions","document","querySelectorAll","activeAccordion","forEach","el","addEventListener","e","self","currentTarget","control","querySelector","content","target","closest","classList","remove","setAttribute","activeControl","activeContent","add","MicroModal","FOCUSABLE_ELEMENTS","Modal","constructor","targetModal","triggers","onShow","onClose","openTrigger","closeTrigger","openClass","disableScroll","disableScrollElement","disableFocus","backFocus","awaitCloseAnimation","awaitOpenAnimation","disableEsc","debugMode","this","modal","getElementById","config","length","registerTriggers","onClick","bind","onKeydown","filter","Boolean","trigger","event","showModal","activeElement","scrollBehaviour","addEventListeners","handler","removeEventListener","setFocusToFirstNode","closeModal","_this","removeEventListeners","focus","closeModalById","getSizeScrollbar","window","innerWidth","documentElement","clientWidth","getScrollShiftNodes","nodes","Array","toggle","body","scrollShiftElement","scrollSize","Object","assign","style","marginRight","overflow","item","hasAttribute","parentNode","preventDefault","stopPropagation","keyCode","retainFocus","getFocusableNodes","focusableNodes","nodesWhichAreNotCloseTargets","node","offsetParent","contains","focusedItemIndex","indexOf","shiftKey","activeModal","activeModals","validateModalPresence","id","console","warn","validateArgs","triggerMap","validateTriggerPresence","init","options","generateTriggerMap","triggerAttr","attributes","value","undefined","push","key","show","close","settings","startModal","modalCloseLink","dataset"],"sourceRoot":""}